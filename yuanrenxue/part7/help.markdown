# 题目：采集这5页中胜点列的数据，找出胜点最高的召唤师，将召唤师姓名填入答案中

## 地址:https://match.yuanrenxue.cn/match/7

![alt text](images/image.png)

#### 先看请求，url和cookie都很正常，毕竟标题都说了是css加密，正常请求数据即可

#### 问题出在响应这里，data明显是加密的，还有一串加密的字符串不知道是干嘛的，猜测是解密的密钥。多请求几遍发现密钥会变动

#### 任务大概明确了，找到data的解密位置，复制相关代码，使用密钥对请求的data进行解密

![alt text](images/image-1.png)

#### 找了半天解密位置没找到，百度发现data这种格式类似字体加密 &# + 字符编码 

#### 简单来讲，就是 通过 CSS 自定义字体库的方式，使得页面源码中的数据与显示出来的数据不同的一种加密方式
[关于字体加密详细说明](https://zhuanlan.zhihu.com/p/441546113)

#### 现在我们要找到字体源文件看看怎么加密的，搜索font-face找到字体文件src

![alt text](images/image-2.png)

#### 继续搜索ttf，看到ttf = data.woff

![alt text](images/image-3.png)

#### 我们请求的woff就是字体文件，原样构建一个链接放到浏览器里下载看看
data:font/truetype;charset=utf-8;base64,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

#### 通过 [在线字体查看器](https://www.bejson.com/ui/font/) 打开刚刚下载的字体文件

#### 对比编码，是一致的，那这个编码要怎么通过程序获取,每次请求编码又会变动，又怎么知道编码代表那个数字呢

![alt text](images/image-4.png)


#### 使用TTFont库将ttf文件转换成xml文件，就能知道字体文件内部构造

![alt text](images/image-5.png)

#### 打开xml文件，看到每个TTGlyph标签表示一个字符数据，name为字符编码，下面有多个contour标签，每个contour标签下又有多个pt标签

![alt text](images/image-8.png)

#### 多请求几次，发现不管编码怎么变，xml文件中字符的on值是固定的，这样我们可以把字符代表的on值记录下来。和每次请求的on值做映射就能知道是那个数了

![alt text](images/image-6.png)
![alt text](images/image-7.png)

#### 经过各种数据提取转换映射操作后，得到了真实的胜点数据，题目要求获取最高胜点的召唤师名称，现在要将胜点和召唤师名称对应起来

#### 既然返回值里没有，名称肯定写在页面里了，随便搜索一个名字就能找到

![alt text](images/image-9.png)

#### 复制过来name列表，打印一下名字，显示66条，实际共50条

![alt text](images/image-10.png)

#### 稍微对比一下，1-50条对应页面50条，删掉多余名字，从胜点数组找到最高胜点下标，对应召唤师名称数组下标就是胜点最高的召唤师